
SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000073e  000007b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000b7c  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bfe  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 60 03 	call	0x6c0	; 0x6c0 <main>
  7a:	0c 94 9d 03 	jmp	0x73a	; 0x73a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SPI_MasterInit>:


#include "SPI.h"

void SPI_MasterInit(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62

/* Set MOSI and SCK output, all others input */
DDRB = (1<<PORTB5)|(1<<PORTB7);
  8a:	e7 e3       	ldi	r30, 0x37	; 55
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 ea       	ldi	r24, 0xA0	; 160
  90:	80 83       	st	Z, r24
/* Enable SPI, Master, set clock rate fck/16 */
SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  92:	ed e2       	ldi	r30, 0x2D	; 45
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	81 e5       	ldi	r24, 0x51	; 81
  98:	80 83       	st	Z, r24
}
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	08 95       	ret

000000a0 <SPI_MasterTransmit>:


void SPI_MasterTransmit(char cData)
{
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	0f 92       	push	r0
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	89 83       	std	Y+1, r24	; 0x01
/* Start transmission */
SPDR = cData;
  ac:	ef e2       	ldi	r30, 0x2F	; 47
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	80 83       	st	Z, r24
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)));
  b4:	ee e2       	ldi	r30, 0x2E	; 46
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 23       	and	r24, r24
  bc:	dc f7       	brge	.-10     	; 0xb4 <SPI_MasterTransmit+0x14>
}
  be:	0f 90       	pop	r0
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	08 95       	ret

000000c6 <SPI_SlaveInit>:


void SPI_SlaveInit(void)
{
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
/* Set MISO output, all others input */
DDRB = (1<<PORTB6);
  ce:	e7 e3       	ldi	r30, 0x37	; 55
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
/* Enable SPI */
SPCR = (1<<SPE);
  d6:	ed e2       	ldi	r30, 0x2D	; 45
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 e4       	ldi	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
}
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	08 95       	ret

000000e4 <SPI_SlaveReceive>:

uint8 SPI_SlaveReceive(void)
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62

/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)))
  ec:	ee e2       	ldi	r30, 0x2E	; 46
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	dc f7       	brge	.-10     	; 0xec <SPI_SlaveReceive+0x8>
;
/* Return data register */
return SPDR;
  f6:	ef e2       	ldi	r30, 0x2F	; 47
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
}
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <DIO_INIT>:


};


void DIO_INIT(void){
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	00 d0       	rcall	.+0      	; 0x108 <DIO_INIT+0x6>
 108:	00 d0       	rcall	.+0      	; 0x10a <DIO_INIT+0x8>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	int count = sizeof(PIN_Cfgs)/sizeof(PIN_Cfgs[0]);
 10e:	8a e0       	ldi	r24, 0x0A	; 10
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	9c 83       	std	Y+4, r25	; 0x04
 114:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for (i=0 ;i<count ;i++){
 116:	1a 82       	std	Y+2, r1	; 0x02
 118:	19 82       	std	Y+1, r1	; 0x01
 11a:	50 c1       	rjmp	.+672    	; 0x3bc <DIO_INIT+0x2ba>
		if(PIN_Cfgs[i].Pin_Port==DIO_PortA){
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	9a 81       	ldd	r25, Y+2	; 0x02
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	fc 01       	movw	r30, r24
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	80 81       	ld	r24, Z
 130:	88 23       	and	r24, r24
 132:	09 f0       	breq	.+2      	; 0x136 <DIO_INIT+0x34>
 134:	46 c0       	rjmp	.+140    	; 0x1c2 <DIO_INIT+0xc0>
			if(PIN_Cfgs[i].Pin==OUTPUT){
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	9a 81       	ldd	r25, Y+2	; 0x02
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	fc 01       	movw	r30, r24
 144:	ef 59       	subi	r30, 0x9F	; 159
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	80 81       	ld	r24, Z
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	e9 f4       	brne	.+58     	; 0x188 <DIO_INIT+0x86>
				SET_BIT(DDRA,PIN_Cfgs[i].Pin);
 14e:	aa e3       	ldi	r26, 0x3A	; 58
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	ea e3       	ldi	r30, 0x3A	; 58
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	48 2f       	mov	r20, r24
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	fc 01       	movw	r30, r24
 168:	ef 59       	subi	r30, 0x9F	; 159
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	80 81       	ld	r24, Z
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 2e       	mov	r0, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_INIT+0x7c>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_INIT+0x78>
 182:	84 2b       	or	r24, r20
 184:	8c 93       	st	X, r24
 186:	1d c0       	rjmp	.+58     	; 0x1c2 <DIO_INIT+0xc0>
			}
			else {
				CLEAR_BIT(DDRA,PIN_Cfgs[i].Pin);
 188:	aa e3       	ldi	r26, 0x3A	; 58
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	ea e3       	ldi	r30, 0x3A	; 58
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	48 2f       	mov	r20, r24
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	9a 81       	ldd	r25, Y+2	; 0x02
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	fc 01       	movw	r30, r24
 1a2:	ef 59       	subi	r30, 0x9F	; 159
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 2e       	mov	r0, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_INIT+0xb6>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_INIT+0xb2>
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	8c 93       	st	X, r24
			}
		}
		if(PIN_Cfgs[i].Pin_Port==DIO_PortB){
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	fc 01       	movw	r30, r24
 1d0:	e0 5a       	subi	r30, 0xA0	; 160
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	80 81       	ld	r24, Z
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_INIT+0xda>
 1da:	46 c0       	rjmp	.+140    	; 0x268 <DIO_INIT+0x166>
			if(PIN_Cfgs[i].Pin==OUTPUT){
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	9a 81       	ldd	r25, Y+2	; 0x02
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	fc 01       	movw	r30, r24
 1ea:	ef 59       	subi	r30, 0x9F	; 159
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	80 81       	ld	r24, Z
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	e9 f4       	brne	.+58     	; 0x22e <DIO_INIT+0x12c>
				SET_BIT(DDRB,PIN_Cfgs[i].Pin);
 1f4:	a7 e3       	ldi	r26, 0x37	; 55
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e7 e3       	ldi	r30, 0x37	; 55
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	9a 81       	ldd	r25, Y+2	; 0x02
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	fc 01       	movw	r30, r24
 20e:	ef 59       	subi	r30, 0x9F	; 159
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	80 81       	ld	r24, Z
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 2e       	mov	r0, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_INIT+0x122>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_INIT+0x11e>
 228:	84 2b       	or	r24, r20
 22a:	8c 93       	st	X, r24
 22c:	1d c0       	rjmp	.+58     	; 0x268 <DIO_INIT+0x166>
			}
			else {
				CLEAR_BIT(DDRB,PIN_Cfgs[i].Pin);
 22e:	a7 e3       	ldi	r26, 0x37	; 55
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	e7 e3       	ldi	r30, 0x37	; 55
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	48 2f       	mov	r20, r24
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	9a 81       	ldd	r25, Y+2	; 0x02
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	fc 01       	movw	r30, r24
 248:	ef 59       	subi	r30, 0x9F	; 159
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	80 81       	ld	r24, Z
 24e:	28 2f       	mov	r18, r24
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 2e       	mov	r0, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_INIT+0x15c>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_INIT+0x158>
 262:	80 95       	com	r24
 264:	84 23       	and	r24, r20
 266:	8c 93       	st	X, r24
			}
		}
		if(PIN_Cfgs[i].Pin_Port==DIO_PortC){
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	9a 81       	ldd	r25, Y+2	; 0x02
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	fc 01       	movw	r30, r24
 276:	e0 5a       	subi	r30, 0xA0	; 160
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	80 81       	ld	r24, Z
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	09 f0       	breq	.+2      	; 0x282 <DIO_INIT+0x180>
 280:	46 c0       	rjmp	.+140    	; 0x30e <DIO_INIT+0x20c>
			if(PIN_Cfgs[i].Pin==OUTPUT){
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	9a 81       	ldd	r25, Y+2	; 0x02
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	fc 01       	movw	r30, r24
 290:	ef 59       	subi	r30, 0x9F	; 159
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	80 81       	ld	r24, Z
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	e9 f4       	brne	.+58     	; 0x2d4 <DIO_INIT+0x1d2>
				SET_BIT(DDRC,PIN_Cfgs[i].Pin);
 29a:	a4 e3       	ldi	r26, 0x34	; 52
 29c:	b0 e0       	ldi	r27, 0x00	; 0
 29e:	e4 e3       	ldi	r30, 0x34	; 52
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	48 2f       	mov	r20, r24
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	9a 81       	ldd	r25, Y+2	; 0x02
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	fc 01       	movw	r30, r24
 2b4:	ef 59       	subi	r30, 0x9F	; 159
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	80 81       	ld	r24, Z
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 2e       	mov	r0, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_INIT+0x1c8>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_INIT+0x1c4>
 2ce:	84 2b       	or	r24, r20
 2d0:	8c 93       	st	X, r24
 2d2:	1d c0       	rjmp	.+58     	; 0x30e <DIO_INIT+0x20c>
			}
			else {
				CLEAR_BIT(DDRC,PIN_Cfgs[i].Pin);
 2d4:	a4 e3       	ldi	r26, 0x34	; 52
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e4 e3       	ldi	r30, 0x34	; 52
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	9a 81       	ldd	r25, Y+2	; 0x02
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	fc 01       	movw	r30, r24
 2ee:	ef 59       	subi	r30, 0x9F	; 159
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	80 81       	ld	r24, Z
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_INIT+0x202>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_INIT+0x1fe>
 308:	80 95       	com	r24
 30a:	84 23       	and	r24, r20
 30c:	8c 93       	st	X, r24
			}
		}
		if(PIN_Cfgs[i].Pin_Port==DIO_PortD){
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	9a 81       	ldd	r25, Y+2	; 0x02
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	fc 01       	movw	r30, r24
 31c:	e0 5a       	subi	r30, 0xA0	; 160
 31e:	ff 4f       	sbci	r31, 0xFF	; 255
 320:	80 81       	ld	r24, Z
 322:	83 30       	cpi	r24, 0x03	; 3
 324:	09 f0       	breq	.+2      	; 0x328 <DIO_INIT+0x226>
 326:	45 c0       	rjmp	.+138    	; 0x3b2 <DIO_INIT+0x2b0>
			if(PIN_Cfgs[i].Pin==OUTPUT){
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	9a 81       	ldd	r25, Y+2	; 0x02
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	fc 01       	movw	r30, r24
 336:	ef 59       	subi	r30, 0x9F	; 159
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	80 81       	ld	r24, Z
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	e9 f4       	brne	.+58     	; 0x37a <DIO_INIT+0x278>
				SET_BIT(DDRD,PIN_Cfgs[i].Pin);
 340:	a1 e3       	ldi	r26, 0x31	; 49
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e1 e3       	ldi	r30, 0x31	; 49
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	48 2f       	mov	r20, r24
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	9a 81       	ldd	r25, Y+2	; 0x02
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	fc 01       	movw	r30, r24
 35a:	ef 59       	subi	r30, 0x9F	; 159
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	80 81       	ld	r24, Z
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 2e       	mov	r0, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_INIT+0x26e>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_INIT+0x26a>
 374:	84 2b       	or	r24, r20
 376:	8c 93       	st	X, r24
 378:	1c c0       	rjmp	.+56     	; 0x3b2 <DIO_INIT+0x2b0>
			}
			else {
				CLEAR_BIT(DDRD,PIN_Cfgs[i].Pin);
 37a:	a1 e3       	ldi	r26, 0x31	; 49
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	e1 e3       	ldi	r30, 0x31	; 49
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	48 2f       	mov	r20, r24
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	9a 81       	ldd	r25, Y+2	; 0x02
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	fc 01       	movw	r30, r24
 394:	ef 59       	subi	r30, 0x9F	; 159
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	80 81       	ld	r24, Z
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_INIT+0x2a6>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	2a 95       	dec	r18
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_INIT+0x2a2>
 3ac:	80 95       	com	r24
 3ae:	84 23       	and	r24, r20
 3b0:	8c 93       	st	X, r24


void DIO_INIT(void){
	int count = sizeof(PIN_Cfgs)/sizeof(PIN_Cfgs[0]);
	int i;
	for (i=0 ;i<count ;i++){
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	9a 81       	ldd	r25, Y+2	; 0x02
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	9a 83       	std	Y+2, r25	; 0x02
 3ba:	89 83       	std	Y+1, r24	; 0x01
 3bc:	29 81       	ldd	r18, Y+1	; 0x01
 3be:	3a 81       	ldd	r19, Y+2	; 0x02
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	9c 81       	ldd	r25, Y+4	; 0x04
 3c4:	28 17       	cp	r18, r24
 3c6:	39 07       	cpc	r19, r25
 3c8:	0c f4       	brge	.+2      	; 0x3cc <DIO_INIT+0x2ca>
 3ca:	a8 ce       	rjmp	.-688    	; 0x11c <DIO_INIT+0x1a>
				CLEAR_BIT(DDRD,PIN_Cfgs[i].Pin);
			}
		}
	}

}
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	cf 91       	pop	r28
 3d6:	df 91       	pop	r29
 3d8:	08 95       	ret

000003da <DIO_READ>:




DIO_LEVEL DIO_READ(DIO_Channel_Type channel){
 3da:	df 93       	push	r29
 3dc:	cf 93       	push	r28
 3de:	00 d0       	rcall	.+0      	; 0x3e0 <DIO_READ+0x6>
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <DIO_READ+0x8>
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <DIO_READ+0xa>
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	8b 83       	std	Y+3, r24	; 0x03

	DIO_PORT port =  channel /8;
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	86 95       	lsr	r24
 3ee:	86 95       	lsr	r24
 3f0:	86 95       	lsr	r24
 3f2:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PIN pin =  channel %8;
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	87 70       	andi	r24, 0x07	; 7
 3f8:	89 83       	std	Y+1, r24	; 0x01


	switch (port){
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	3e 83       	std	Y+6, r19	; 0x06
 402:	2d 83       	std	Y+5, r18	; 0x05
 404:	4d 81       	ldd	r20, Y+5	; 0x05
 406:	5e 81       	ldd	r21, Y+6	; 0x06
 408:	41 30       	cpi	r20, 0x01	; 1
 40a:	51 05       	cpc	r21, r1
 40c:	49 f1       	breq	.+82     	; 0x460 <DIO_READ+0x86>
 40e:	8d 81       	ldd	r24, Y+5	; 0x05
 410:	9e 81       	ldd	r25, Y+6	; 0x06
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	91 05       	cpc	r25, r1
 416:	34 f4       	brge	.+12     	; 0x424 <DIO_READ+0x4a>
 418:	2d 81       	ldd	r18, Y+5	; 0x05
 41a:	3e 81       	ldd	r19, Y+6	; 0x06
 41c:	21 15       	cp	r18, r1
 41e:	31 05       	cpc	r19, r1
 420:	61 f0       	breq	.+24     	; 0x43a <DIO_READ+0x60>
 422:	57 c0       	rjmp	.+174    	; 0x4d2 <DIO_READ+0xf8>
 424:	4d 81       	ldd	r20, Y+5	; 0x05
 426:	5e 81       	ldd	r21, Y+6	; 0x06
 428:	42 30       	cpi	r20, 0x02	; 2
 42a:	51 05       	cpc	r21, r1
 42c:	61 f1       	breq	.+88     	; 0x486 <DIO_READ+0xac>
 42e:	8d 81       	ldd	r24, Y+5	; 0x05
 430:	9e 81       	ldd	r25, Y+6	; 0x06
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	91 05       	cpc	r25, r1
 436:	d1 f1       	breq	.+116    	; 0x4ac <DIO_READ+0xd2>
 438:	4c c0       	rjmp	.+152    	; 0x4d2 <DIO_READ+0xf8>
	case(DIO_PortA):
		return	GET_BIT(PINA,pin);
 43a:	e9 e3       	ldi	r30, 0x39	; 57
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	89 81       	ldd	r24, Y+1	; 0x01
 446:	88 2f       	mov	r24, r24
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	a9 01       	movw	r20, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_READ+0x78>
 44e:	55 95       	asr	r21
 450:	47 95       	ror	r20
 452:	8a 95       	dec	r24
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_READ+0x74>
 456:	ca 01       	movw	r24, r20
 458:	58 2f       	mov	r21, r24
 45a:	51 70       	andi	r21, 0x01	; 1
 45c:	5c 83       	std	Y+4, r21	; 0x04
 45e:	3b c0       	rjmp	.+118    	; 0x4d6 <DIO_READ+0xfc>
	break;

	case(DIO_PortB):
		return	GET_BIT(PINB,pin);
 460:	e6 e3       	ldi	r30, 0x36	; 54
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	88 2f       	mov	r24, r24
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	a9 01       	movw	r20, r18
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_READ+0x9e>
 474:	55 95       	asr	r21
 476:	47 95       	ror	r20
 478:	8a 95       	dec	r24
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_READ+0x9a>
 47c:	ca 01       	movw	r24, r20
 47e:	58 2f       	mov	r21, r24
 480:	51 70       	andi	r21, 0x01	; 1
 482:	5c 83       	std	Y+4, r21	; 0x04
 484:	28 c0       	rjmp	.+80     	; 0x4d6 <DIO_READ+0xfc>
	break;

	case(DIO_PortC):
		return	GET_BIT(PINC,pin);
 486:	e3 e3       	ldi	r30, 0x33	; 51
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	28 2f       	mov	r18, r24
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	88 2f       	mov	r24, r24
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	a9 01       	movw	r20, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_READ+0xc4>
 49a:	55 95       	asr	r21
 49c:	47 95       	ror	r20
 49e:	8a 95       	dec	r24
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_READ+0xc0>
 4a2:	ca 01       	movw	r24, r20
 4a4:	58 2f       	mov	r21, r24
 4a6:	51 70       	andi	r21, 0x01	; 1
 4a8:	5c 83       	std	Y+4, r21	; 0x04
 4aa:	15 c0       	rjmp	.+42     	; 0x4d6 <DIO_READ+0xfc>
	break;

	case(DIO_PortD):
		return	GET_BIT(PIND,pin);
 4ac:	e0 e3       	ldi	r30, 0x30	; 48
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	28 2f       	mov	r18, r24
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	88 2f       	mov	r24, r24
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	a9 01       	movw	r20, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_READ+0xea>
 4c0:	55 95       	asr	r21
 4c2:	47 95       	ror	r20
 4c4:	8a 95       	dec	r24
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_READ+0xe6>
 4c8:	ca 01       	movw	r24, r20
 4ca:	58 2f       	mov	r21, r24
 4cc:	51 70       	andi	r21, 0x01	; 1
 4ce:	5c 83       	std	Y+4, r21	; 0x04
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_READ+0xfc>
	break;
	default:
		return -1;
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	8c 83       	std	Y+4, r24	; 0x04
 4d6:	8c 81       	ldd	r24, Y+4	; 0x04
	break;

	}

}
 4d8:	26 96       	adiw	r28, 0x06	; 6
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	cf 91       	pop	r28
 4e6:	df 91       	pop	r29
 4e8:	08 95       	ret

000004ea <DIO_WRITE>:




void DIO_WRITE(DIO_Channel_Type channel , DIO_LEVEL level){
 4ea:	df 93       	push	r29
 4ec:	cf 93       	push	r28
 4ee:	00 d0       	rcall	.+0      	; 0x4f0 <DIO_WRITE+0x6>
 4f0:	00 d0       	rcall	.+0      	; 0x4f2 <DIO_WRITE+0x8>
 4f2:	00 d0       	rcall	.+0      	; 0x4f4 <DIO_WRITE+0xa>
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
 4f8:	8b 83       	std	Y+3, r24	; 0x03
 4fa:	6c 83       	std	Y+4, r22	; 0x04

	DIO_PORT port =  channel /8;
 4fc:	8b 81       	ldd	r24, Y+3	; 0x03
 4fe:	86 95       	lsr	r24
 500:	86 95       	lsr	r24
 502:	86 95       	lsr	r24
 504:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PIN pin =  channel %8;
 506:	8b 81       	ldd	r24, Y+3	; 0x03
 508:	87 70       	andi	r24, 0x07	; 7
 50a:	89 83       	std	Y+1, r24	; 0x01

	switch (port){
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	3e 83       	std	Y+6, r19	; 0x06
 514:	2d 83       	std	Y+5, r18	; 0x05
 516:	8d 81       	ldd	r24, Y+5	; 0x05
 518:	9e 81       	ldd	r25, Y+6	; 0x06
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	91 05       	cpc	r25, r1
 51e:	09 f4       	brne	.+2      	; 0x522 <DIO_WRITE+0x38>
 520:	43 c0       	rjmp	.+134    	; 0x5a8 <DIO_WRITE+0xbe>
 522:	2d 81       	ldd	r18, Y+5	; 0x05
 524:	3e 81       	ldd	r19, Y+6	; 0x06
 526:	22 30       	cpi	r18, 0x02	; 2
 528:	31 05       	cpc	r19, r1
 52a:	2c f4       	brge	.+10     	; 0x536 <DIO_WRITE+0x4c>
 52c:	8d 81       	ldd	r24, Y+5	; 0x05
 52e:	9e 81       	ldd	r25, Y+6	; 0x06
 530:	00 97       	sbiw	r24, 0x00	; 0
 532:	71 f0       	breq	.+28     	; 0x550 <DIO_WRITE+0x66>
 534:	bc c0       	rjmp	.+376    	; 0x6ae <DIO_WRITE+0x1c4>
 536:	2d 81       	ldd	r18, Y+5	; 0x05
 538:	3e 81       	ldd	r19, Y+6	; 0x06
 53a:	22 30       	cpi	r18, 0x02	; 2
 53c:	31 05       	cpc	r19, r1
 53e:	09 f4       	brne	.+2      	; 0x542 <DIO_WRITE+0x58>
 540:	5f c0       	rjmp	.+190    	; 0x600 <DIO_WRITE+0x116>
 542:	8d 81       	ldd	r24, Y+5	; 0x05
 544:	9e 81       	ldd	r25, Y+6	; 0x06
 546:	83 30       	cpi	r24, 0x03	; 3
 548:	91 05       	cpc	r25, r1
 54a:	09 f4       	brne	.+2      	; 0x54e <DIO_WRITE+0x64>
 54c:	85 c0       	rjmp	.+266    	; 0x658 <DIO_WRITE+0x16e>
 54e:	af c0       	rjmp	.+350    	; 0x6ae <DIO_WRITE+0x1c4>
		case(DIO_PortA):
				if (level==HIGH){
 550:	8c 81       	ldd	r24, Y+4	; 0x04
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	a1 f4       	brne	.+40     	; 0x57e <DIO_WRITE+0x94>
					SET_BIT(PORTA,pin);
 556:	ab e3       	ldi	r26, 0x3B	; 59
 558:	b0 e0       	ldi	r27, 0x00	; 0
 55a:	eb e3       	ldi	r30, 0x3B	; 59
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	48 2f       	mov	r20, r24
 562:	89 81       	ldd	r24, Y+1	; 0x01
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 2e       	mov	r0, r18
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_WRITE+0x8a>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	0a 94       	dec	r0
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_WRITE+0x86>
 578:	84 2b       	or	r24, r20
 57a:	8c 93       	st	X, r24
 57c:	98 c0       	rjmp	.+304    	; 0x6ae <DIO_WRITE+0x1c4>
					}else{CLEAR_BIT(PORTA,pin);}
 57e:	ab e3       	ldi	r26, 0x3B	; 59
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	eb e3       	ldi	r30, 0x3B	; 59
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	48 2f       	mov	r20, r24
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 2e       	mov	r0, r18
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_WRITE+0xb2>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	0a 94       	dec	r0
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_WRITE+0xae>
 5a0:	80 95       	com	r24
 5a2:	84 23       	and	r24, r20
 5a4:	8c 93       	st	X, r24
 5a6:	83 c0       	rjmp	.+262    	; 0x6ae <DIO_WRITE+0x1c4>
		break;

		case(DIO_PortB):
				if (level==HIGH){
 5a8:	8c 81       	ldd	r24, Y+4	; 0x04
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	a1 f4       	brne	.+40     	; 0x5d6 <DIO_WRITE+0xec>
					SET_BIT(PORTB,pin);
 5ae:	a8 e3       	ldi	r26, 0x38	; 56
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	e8 e3       	ldi	r30, 0x38	; 56
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	48 2f       	mov	r20, r24
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 2e       	mov	r0, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_WRITE+0xe2>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	0a 94       	dec	r0
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_WRITE+0xde>
 5d0:	84 2b       	or	r24, r20
 5d2:	8c 93       	st	X, r24
 5d4:	6c c0       	rjmp	.+216    	; 0x6ae <DIO_WRITE+0x1c4>
					}else{CLEAR_BIT(PORTB,pin);}
 5d6:	a8 e3       	ldi	r26, 0x38	; 56
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	e8 e3       	ldi	r30, 0x38	; 56
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	48 2f       	mov	r20, r24
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 2e       	mov	r0, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_WRITE+0x10a>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_WRITE+0x106>
 5f8:	80 95       	com	r24
 5fa:	84 23       	and	r24, r20
 5fc:	8c 93       	st	X, r24
 5fe:	57 c0       	rjmp	.+174    	; 0x6ae <DIO_WRITE+0x1c4>
		break;

		case(DIO_PortC):
				if (level==HIGH){
 600:	8c 81       	ldd	r24, Y+4	; 0x04
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	a1 f4       	brne	.+40     	; 0x62e <DIO_WRITE+0x144>
					SET_BIT(PORTC,pin);
 606:	a5 e3       	ldi	r26, 0x35	; 53
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	e5 e3       	ldi	r30, 0x35	; 53
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	48 2f       	mov	r20, r24
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 2e       	mov	r0, r18
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_WRITE+0x13a>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	0a 94       	dec	r0
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_WRITE+0x136>
 628:	84 2b       	or	r24, r20
 62a:	8c 93       	st	X, r24
 62c:	40 c0       	rjmp	.+128    	; 0x6ae <DIO_WRITE+0x1c4>
					}else{CLEAR_BIT(PORTC,pin);}
 62e:	a5 e3       	ldi	r26, 0x35	; 53
 630:	b0 e0       	ldi	r27, 0x00	; 0
 632:	e5 e3       	ldi	r30, 0x35	; 53
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	48 2f       	mov	r20, r24
 63a:	89 81       	ldd	r24, Y+1	; 0x01
 63c:	28 2f       	mov	r18, r24
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 2e       	mov	r0, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_WRITE+0x162>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_WRITE+0x15e>
 650:	80 95       	com	r24
 652:	84 23       	and	r24, r20
 654:	8c 93       	st	X, r24
 656:	2b c0       	rjmp	.+86     	; 0x6ae <DIO_WRITE+0x1c4>
		break;

		case(DIO_PortD):
				if (level==HIGH){
 658:	8c 81       	ldd	r24, Y+4	; 0x04
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	a1 f4       	brne	.+40     	; 0x686 <DIO_WRITE+0x19c>
					SET_BIT(PORTD,pin);
 65e:	a2 e3       	ldi	r26, 0x32	; 50
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	e2 e3       	ldi	r30, 0x32	; 50
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	48 2f       	mov	r20, r24
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 2e       	mov	r0, r18
 676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_WRITE+0x192>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	0a 94       	dec	r0
 67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_WRITE+0x18e>
 680:	84 2b       	or	r24, r20
 682:	8c 93       	st	X, r24
 684:	14 c0       	rjmp	.+40     	; 0x6ae <DIO_WRITE+0x1c4>
					}else{CLEAR_BIT(PORTD,pin);}
 686:	a2 e3       	ldi	r26, 0x32	; 50
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e2 e3       	ldi	r30, 0x32	; 50
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	48 2f       	mov	r20, r24
 692:	89 81       	ldd	r24, Y+1	; 0x01
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 2e       	mov	r0, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_WRITE+0x1ba>
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	0a 94       	dec	r0
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_WRITE+0x1b6>
 6a8:	80 95       	com	r24
 6aa:	84 23       	and	r24, r20
 6ac:	8c 93       	st	X, r24
		default:
		break;

	}

}
 6ae:	26 96       	adiw	r28, 0x06	; 6
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	f8 94       	cli
 6b4:	de bf       	out	0x3e, r29	; 62
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	cd bf       	out	0x3d, r28	; 61
 6ba:	cf 91       	pop	r28
 6bc:	df 91       	pop	r29
 6be:	08 95       	ret

000006c0 <main>:
 *      Author: Shady
 */
#include "MCAL/DIO/DIO.h"
#include "MCAL/SPI/SPI.h"

int main() {
 6c0:	df 93       	push	r29
 6c2:	cf 93       	push	r28
 6c4:	0f 92       	push	r0
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
	SPI_SlaveInit();
 6ca:	0e 94 63 00 	call	0xc6	; 0xc6 <SPI_SlaveInit>
	SET_BIT(DDRA, 0);
 6ce:	aa e3       	ldi	r26, 0x3A	; 58
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	ea e3       	ldi	r30, 0x3A	; 58
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	81 60       	ori	r24, 0x01	; 1
 6da:	8c 93       	st	X, r24
	SET_BIT(DDRA, 1);
 6dc:	aa e3       	ldi	r26, 0x3A	; 58
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	ea e3       	ldi	r30, 0x3A	; 58
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	82 60       	ori	r24, 0x02	; 2
 6e8:	8c 93       	st	X, r24
	uint8 data;
	while (1) {
		data = SPI_SlaveReceive();
 6ea:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_SlaveReceive>
 6ee:	89 83       	std	Y+1, r24	; 0x01
		if (data == '0') {
 6f0:	89 81       	ldd	r24, Y+1	; 0x01
 6f2:	80 33       	cpi	r24, 0x30	; 48
 6f4:	41 f4       	brne	.+16     	; 0x706 <main+0x46>
			SET_BIT(PORTA,0);
 6f6:	ab e3       	ldi	r26, 0x3B	; 59
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	eb e3       	ldi	r30, 0x3B	; 59
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	81 60       	ori	r24, 0x01	; 1
 702:	8c 93       	st	X, r24
 704:	f2 cf       	rjmp	.-28     	; 0x6ea <main+0x2a>
//			TOGGLE_BIT(PORTA, 0);
		} else if (data == '1') {
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	81 33       	cpi	r24, 0x31	; 49
 70a:	41 f4       	brne	.+16     	; 0x71c <main+0x5c>
			SET_BIT(PORTA,1);
 70c:	ab e3       	ldi	r26, 0x3B	; 59
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	eb e3       	ldi	r30, 0x3B	; 59
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	82 60       	ori	r24, 0x02	; 2
 718:	8c 93       	st	X, r24
 71a:	e7 cf       	rjmp	.-50     	; 0x6ea <main+0x2a>
//			TOGGLE_BIT(PORTA, 1);
		} else {

			CLEAR_BIT(PORTA, 0);
 71c:	ab e3       	ldi	r26, 0x3B	; 59
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	eb e3       	ldi	r30, 0x3B	; 59
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	8e 7f       	andi	r24, 0xFE	; 254
 728:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA, 1);
 72a:	ab e3       	ldi	r26, 0x3B	; 59
 72c:	b0 e0       	ldi	r27, 0x00	; 0
 72e:	eb e3       	ldi	r30, 0x3B	; 59
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	8d 7f       	andi	r24, 0xFD	; 253
 736:	8c 93       	st	X, r24
 738:	d8 cf       	rjmp	.-80     	; 0x6ea <main+0x2a>

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
