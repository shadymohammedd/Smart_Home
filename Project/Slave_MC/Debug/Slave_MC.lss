
Slave_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000600  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000804  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  64:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_SLAVE_INIT>:


#include "SPI_Slave.h"
#include "SPI_Slave.h"

void SPI_SLAVE_INIT() {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SPCR,DORD);
  74:	ad e2       	ldi	r26, 0x2D	; 45
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ed e2       	ldi	r30, 0x2D	; 45
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	8c 93       	st	X, r24


	// Set MISO output
	SET_BIT(DDRB,4);
  82:	a7 e3       	ldi	r26, 0x37	; 55
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 61       	ori	r24, 0x10	; 16
  8e:	8c 93       	st	X, r24
// Enable SPI.
#if SPI_STATUS == ENABLE
	SET_BIT(SPCR, SPE);
  90:	ad e2       	ldi	r26, 0x2D	; 45
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	ed e2       	ldi	r30, 0x2D	; 45
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	8c 93       	st	X, r24

// Enabling Slave/Master.
#if SPI_MSTR_SLVE_SET == MASTER
	SET_BIT(SPCR, MSTR);
#elif SPI_MSTR_SLVE_SET == SLAVE
	CLEAR_BIT(SPCR, MSTR);
  9e:	ad e2       	ldi	r26, 0x2D	; 45
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	ed e2       	ldi	r30, 0x2D	; 45
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8f 7e       	andi	r24, 0xEF	; 239
  aa:	8c 93       	st	X, r24
#if SPI_CLOCK_FREQ == FOSC_4
		CLEAR_BIT(SPCR, SPR0);
		CLEAR_BIT(SPCR, SPR1);
		CLEAR_BIT(SPSR, SPI2X);
#elif SPI_CLOCK_FREQ == FOSC_16
		SET_BIT(SPCR, SPR0);
  ac:	ad e2       	ldi	r26, 0x2D	; 45
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	ed e2       	ldi	r30, 0x2D	; 45
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, SPR1);
  ba:	ad e2       	ldi	r26, 0x2D	; 45
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	ed e2       	ldi	r30, 0x2D	; 45
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8d 7f       	andi	r24, 0xFD	; 253
  c6:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR, SPI2X);
  c8:	ae e2       	ldi	r26, 0x2E	; 46
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	ee e2       	ldi	r30, 0x2E	; 46
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	8c 93       	st	X, r24
		break;
	}

// Plarity Setting.
#if SPI_MODE == LeSampRise_TrSetFall
	CLEAR_BIT(SPCR, CPHA);
  d6:	ad e2       	ldi	r26, 0x2D	; 45
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ed e2       	ldi	r30, 0x2D	; 45
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR, CPOL);
  e4:	ad e2       	ldi	r26, 0x2D	; 45
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ed e2       	ldi	r30, 0x2D	; 45
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	87 7f       	andi	r24, 0xF7	; 247
  f0:	8c 93       	st	X, r24
	SET_BIT(SPCR, CPOL);
#elif SPI_MODE == LeSetFall_TrSampRise
	SET_BIT(SPCR, CPHA);
	SET_BIT(SPCR, CPOL);
#endif
}
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <SPI_SLV_RECEV>:


uint8 SPI_SLV_RECEV(void) {
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)));
 100:	ee e2       	ldi	r30, 0x2E	; 46
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 23       	and	r24, r24
 108:	dc f7       	brge	.-10     	; 0x100 <SPI_SLV_RECEV+0x8>
/* Return data register */
return SPDR;
 10a:	ef e2       	ldi	r30, 0x2F	; 47
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
}
 110:	cf 91       	pop	r28
 112:	df 91       	pop	r29
 114:	08 95       	ret

00000116 <main>:
 *      Author: Shady
 */
#include "BIT_MATH.h"
#include "STD_TYPES.h"
#include "MCAL/SPI/SPI_Slave.h"
int main() {
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x6>
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRC, 2);
 120:	a4 e3       	ldi	r26, 0x34	; 52
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e4 e3       	ldi	r30, 0x34	; 52
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	8c 93       	st	X, r24
	SET_BIT(DDRC, 7);
 12e:	a4 e3       	ldi	r26, 0x34	; 52
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e4 e3       	ldi	r30, 0x34	; 52
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	8c 93       	st	X, r24
	SET_BIT(DDRC, 6);
 13c:	a4 e3       	ldi	r26, 0x34	; 52
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e4 e3       	ldi	r30, 0x34	; 52
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 64       	ori	r24, 0x40	; 64
 148:	8c 93       	st	X, r24
	SPI_SLAVE_INIT();
 14a:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_SLAVE_INIT>

	while (1) {


		switch ( SPI_SLV_RECEV()) {
 14e:	0e 94 7c 00 	call	0xf8	; 0xf8 <SPI_SLV_RECEV>
 152:	28 2f       	mov	r18, r24
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	3a 83       	std	Y+2, r19	; 0x02
 158:	29 83       	std	Y+1, r18	; 0x01
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	31 f0       	breq	.+12     	; 0x16e <main+0x58>
 162:	29 81       	ldd	r18, Y+1	; 0x01
 164:	3a 81       	ldd	r19, Y+2	; 0x02
 166:	23 30       	cpi	r18, 0x03	; 3
 168:	31 05       	cpc	r19, r1
 16a:	51 f0       	breq	.+20     	; 0x180 <main+0x6a>
 16c:	f0 cf       	rjmp	.-32     	; 0x14e <main+0x38>

		case 0X00:
			TOG_BIT(PORTC, 2);
 16e:	a5 e3       	ldi	r26, 0x35	; 53
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	e5 e3       	ldi	r30, 0x35	; 53
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	90 81       	ld	r25, Z
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	89 27       	eor	r24, r25
 17c:	8c 93       	st	X, r24
 17e:	e7 cf       	rjmp	.-50     	; 0x14e <main+0x38>
//			TOG_BIT(PORTC, 6);
//			TOG_BIT(PORTC, 7);
			break;
		case 0x03:
		TOG_BIT(PORTC, 6);
 180:	a5 e3       	ldi	r26, 0x35	; 53
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	e5 e3       	ldi	r30, 0x35	; 53
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	90 81       	ld	r25, Z
 18a:	80 e4       	ldi	r24, 0x40	; 64
 18c:	89 27       	eor	r24, r25
 18e:	8c 93       	st	X, r24
 190:	de cf       	rjmp	.-68     	; 0x14e <main+0x38>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
