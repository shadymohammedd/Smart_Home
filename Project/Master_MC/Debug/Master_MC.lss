
Master_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000858  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000081c  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  64:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
//while ( !(UCSRA & (1<<RXC)) );
///* Get and return received data from buffer */
//return UDR;
//}

void USART_Init(uint32 baud) {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <USART_Init+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <USART_Init+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	69 83       	std	Y+1, r22	; 0x01
  7a:	7a 83       	std	Y+2, r23	; 0x02
  7c:	8b 83       	std	Y+3, r24	; 0x03
  7e:	9c 83       	std	Y+4, r25	; 0x04
	/* Set baud rate */
	UBRRH = (uint8) (baud >> 8);
  80:	e0 e4       	ldi	r30, 0x40	; 64
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	89 81       	ldd	r24, Y+1	; 0x01
  86:	9a 81       	ldd	r25, Y+2	; 0x02
  88:	ab 81       	ldd	r26, Y+3	; 0x03
  8a:	bc 81       	ldd	r27, Y+4	; 0x04
  8c:	89 2f       	mov	r24, r25
  8e:	9a 2f       	mov	r25, r26
  90:	ab 2f       	mov	r26, r27
  92:	bb 27       	eor	r27, r27
  94:	80 83       	st	Z, r24
	UBRRL = (uint8) baud;
  96:	e9 e2       	ldi	r30, 0x29	; 41
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UCSRB = (1 << RXEN) | (1 << TXEN);
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
  a6:	e0 e4       	ldi	r30, 0x40	; 64
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	8e e8       	ldi	r24, 0x8E	; 142
  ac:	80 83       	st	Z, r24
}
  ae:	0f 90       	pop	r0
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <USART_Transmit_5_8>:

void USART_Transmit_5_8(uint8 data) {
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	0f 92       	push	r0
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (!( UCSRA & (1 << UDRE)))
  c8:	eb e2       	ldi	r30, 0x2B	; 43
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 2f       	mov	r24, r24
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	80 72       	andi	r24, 0x20	; 32
  d4:	90 70       	andi	r25, 0x00	; 0
  d6:	00 97       	sbiw	r24, 0x00	; 0
  d8:	b9 f3       	breq	.-18     	; 0xc8 <USART_Transmit_5_8+0xc>
		;
	/* Put data into buffer, sends the data */
	UDR = data;
  da:	ec e2       	ldi	r30, 0x2C	; 44
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	80 83       	st	Z, r24
}
  e2:	0f 90       	pop	r0
  e4:	cf 91       	pop	r28
  e6:	df 91       	pop	r29
  e8:	08 95       	ret

000000ea <USART_Receive>:

uint8 USART_Receive(void) {
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (!(UCSRA & (1 << RXC)))
  f2:	eb e2       	ldi	r30, 0x2B	; 43
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	dc f7       	brge	.-10     	; 0xf2 <USART_Receive+0x8>
		;
	/* Get and return received data from buffer */
	return UDR;
  fc:	ec e2       	ldi	r30, 0x2C	; 44
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
}
 102:	cf 91       	pop	r28
 104:	df 91       	pop	r29
 106:	08 95       	ret

00000108 <SPI_MASTER_INIT>:
//	return SPDR;
//}
//
#include "SPI_Master.h"

void SPI_MASTER_INIT() {
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62

	/* Set MOSI and SCK output, all others input */
	SET_BIT(DDRB, 5);
 110:	a7 e3       	ldi	r26, 0x37	; 55
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e7 e3       	ldi	r30, 0x37	; 55
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	8c 93       	st	X, r24
	SET_BIT(DDRB, 7);
 11e:	a7 e3       	ldi	r26, 0x37	; 55
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e7 e3       	ldi	r30, 0x37	; 55
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8c 93       	st	X, r24
	// Enable SPI.
#if SPI_STATUS == ENABLE
	SET_BIT(SPCR, SPE);
 12c:	ad e2       	ldi	r26, 0x2D	; 45
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	ed e2       	ldi	r30, 0x2D	; 45
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR, SPE);
#endif

	// Enabling Slave/Master.
#if SPI_MSTR_SLVE_SET == MASTER
	SET_BIT(SPCR, MSTR);
 13a:	ad e2       	ldi	r26, 0x2D	; 45
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	ed e2       	ldi	r30, 0x2D	; 45
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 61       	ori	r24, 0x10	; 16
 146:	8c 93       	st	X, r24
#if SPI_CLOCK_FREQ == FOSC_4
		CLEAR_BIT(SPCR, SPR0);
		CLEAR_BIT(SPCR, SPR1);
		CLEAR_BIT(SPSR, SPI2X);
#elif SPI_CLOCK_FREQ == FOSC_16
		SET_BIT(SPCR, SPR0);
 148:	ad e2       	ldi	r26, 0x2D	; 45
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	ed e2       	ldi	r30, 0x2D	; 45
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	81 60       	ori	r24, 0x01	; 1
 154:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, SPR1);
 156:	ad e2       	ldi	r26, 0x2D	; 45
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	ed e2       	ldi	r30, 0x2D	; 45
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	8c 93       	st	X, r24
		CLEAR_BIT(SPSR, SPI2X);
 164:	ae e2       	ldi	r26, 0x2E	; 46
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	ee e2       	ldi	r30, 0x2E	; 46
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8e 7f       	andi	r24, 0xFE	; 254
 170:	8c 93       	st	X, r24
		break;
	}

	// Plarity Setting.
#if SPI_MODE == LeSampRise_TrSetFall
	CLEAR_BIT(SPCR, CPHA);
 172:	ad e2       	ldi	r26, 0x2D	; 45
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	ed e2       	ldi	r30, 0x2D	; 45
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR, CPOL);
 180:	ad e2       	ldi	r26, 0x2D	; 45
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	ed e2       	ldi	r30, 0x2D	; 45
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	8c 93       	st	X, r24
	SET_BIT(SPCR, CPOL);
#elif SPI_MODE == LeSetFall_TrSampRise
	SET_BIT(SPCR, CPHA);
	SET_BIT(SPCR, CPOL);
#endif
}
 18e:	cf 91       	pop	r28
 190:	df 91       	pop	r29
 192:	08 95       	ret

00000194 <SPI_MSTR_TRNSMT>:

void SPI_MSTR_TRNSMT(uint8 data) {
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	0f 92       	push	r0
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
 1a0:	ef e2       	ldi	r30, 0x2F	; 47
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	80 83       	st	Z, r24

	while (!(SPSR & (1 << SPIF)))
 1a8:	ee e2       	ldi	r30, 0x2E	; 46
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	88 23       	and	r24, r24
 1b0:	dc f7       	brge	.-10     	; 0x1a8 <SPI_MSTR_TRNSMT+0x14>
		;
}
 1b2:	0f 90       	pop	r0
 1b4:	cf 91       	pop	r28
 1b6:	df 91       	pop	r29
 1b8:	08 95       	ret

000001ba <main>:
 */

#include "MCAL/SPI/SPI_Master.h"
#include "MCAL/UART/UART.h"

int main() {
 1ba:	df 93       	push	r29
 1bc:	cf 93       	push	r28
 1be:	0f 92       	push	r0
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62

	USART_Init(103);
 1c4:	67 e6       	ldi	r22, 0x67	; 103
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	SPI_MASTER_INIT();
 1d0:	0e 94 84 00 	call	0x108	; 0x108 <SPI_MASTER_INIT>
char x=0;
 1d4:	19 82       	std	Y+1, r1	; 0x01
	while (1) {
		x=USART_Receive();
 1d6:	0e 94 75 00 	call	0xea	; 0xea <USART_Receive>
 1da:	89 83       	std	Y+1, r24	; 0x01
		if (x=='0'){
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	80 33       	cpi	r24, 0x30	; 48
 1e0:	21 f4       	brne	.+8      	; 0x1ea <main+0x30>
		SPI_MSTR_TRNSMT(0x00);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 ca 00 	call	0x194	; 0x194 <SPI_MSTR_TRNSMT>
 1e8:	f6 cf       	rjmp	.-20     	; 0x1d6 <main+0x1c>
		} else if (x=='3')
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	83 33       	cpi	r24, 0x33	; 51
 1ee:	99 f7       	brne	.-26     	; 0x1d6 <main+0x1c>
		{
			SPI_MSTR_TRNSMT(0x03);
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 ca 00 	call	0x194	; 0x194 <SPI_MSTR_TRNSMT>
 1f6:	ef cf       	rjmp	.-34     	; 0x1d6 <main+0x1c>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
